{"version":3,"sources":["webpack:///./js/base.js"],"names":["inputRef","document","querySelector","galleryRef","formRef","btnMoreRef","sppinerRef","apiKey","numberPage","inputValue","urlBase","spinHiden","classList","add","spinVisible","remove","showNotification","message","alert","title","text","delay","event","preventDefault","value","clearList","getData","data","hits","renderGaleryList","LuminousGallery","querySelectorAll","galleryOpts","optionsGalleryItem","innerHTML","hidenBtnMore","visibleBtnMore","urlResult","fetch","result","json","console","log","total","forEach","element","template","largeImageURL","webformatURL","tags","likes","views","comments","downloads","insertAdjacentHTML","dir","target","getElementById","Spinner","lines","length","width","radius","scale","corners","speed","rotate","animation","direction","color","fadeColor","top","left","shadow","zIndex","className","position","spin","arrowNavigation","namespace","sourceAttribute","caption","openTrigger","closeTrigger","closeWithEscape","closeOnScroll","showCloseButton","appendToNode","body","appendToSelector","onOpen","onClose","includeImgixJSClass","injectBaseStyles","addEventListener"],"mappings":"0lOAKA,IAAMA,EAAWC,SAASC,cAAc,SAClCC,EAAaF,SAASC,cAAc,YACpCE,EAAUH,SAASC,cAAc,gBACjCG,EAAaJ,SAASC,cAAc,eACpCI,EAAaL,SAASC,cAAc,QACpCK,EAAS,qCACXC,EAAa,EACbC,EAAa,GACXC,EAAU,0BAIhB,SAASC,IACPL,EAAWM,UAAUC,IAAI,SAG3B,SAASC,IACPR,EAAWM,UAAUG,OAAO,SAG9B,SAASC,EAAiBC,GACxBC,gBAAM,CACJC,MAAO,SACPC,KAAOH,EACPI,MAAO,M,kCAOX,WAA+BC,GAA/B,0EACEA,EAAMC,mBACavB,EAASwB,QAAUf,GAFxC,wBAIIgB,IACAhB,EAAaT,EAASwB,MAL1B,SAMuBE,EAAQjB,GAN/B,UAMUkB,EANV,UAO+BA,IAASA,EAAKC,MAP7C,wBASMZ,EAAiB,8BATvB,2BAYIa,EAAiBF,GACjB,IAAIG,IAAgB7B,SAAS8B,iBAAiB,eAAeC,EAAYC,GAb7E,6C,sBAiBA,SAASR,IACPtB,EAAW+B,UAAY,GACvB1B,EAAY,EACZ2B,IAGF,SAASA,IACP9B,EAAWO,UAAUC,IAAI,SAG3B,SAASuB,IACP/B,EAAWO,UAAUG,OAAO,S,SAGfW,E,oEAAf,WAAuBjB,GAAvB,kFACEK,IACIuB,EAAe3B,EAFrB,+CAE2ED,EAF3E,SAE8FD,EAF9F,oBAE4HD,EAF5H,SAGuB+B,MAAMD,GAH7B,cAGQE,EAHR,gBAIqBA,EAAOC,OAJ5B,UAIQb,EAJR,OAKEc,QAAQC,IAAI,OAAQf,GAChBA,EAAKgB,MANX,wBAOI3B,EAAiB,yBACjBL,IARJ,kCAWEH,GAAc,EACZ4B,IACAzB,IAbJ,kBAcSgB,GAdT,6C,sBAiBA,SAASE,EAAiBF,GACxBA,EAAKC,KAAKgB,SAAQ,SAAAC,GAChB,IAAIC,EAAW,+BAA+BD,EAAQE,cAA1C,yBACIF,EAAQG,aADZ,UACkCH,EAAQI,KAD1C,kJAMFJ,EAAQK,MANN,yHAUFL,EAAQM,MAVN,sHAcFN,EAAQO,SAdN,6HAkBFP,EAAQQ,UAlBN,iDAsBZlD,EAAWmD,mBAAmB,YAA9B,GAA8CR,M,kCAIlD,8FACuBpB,EAAQjB,GAD/B,OAEEoB,EAFF,QAGE,IAAIC,IAAgB7B,SAAS8B,iBAAiB,eAAeC,EAAYC,GAH3E,4C,sBAlGAE,IACAxB,IAmBA8B,QAAQc,IAAIvD,GAmFZ,IAoBIwD,EAASvD,SAASwD,eAAe,OAKjCzB,GAJU,IAAI0B,IArBP,CACTC,MAAO,GACPC,OAAQ,GACRC,MAAO,GACPC,OAAQ,GACRC,MAAO,EACPC,QAAS,EACTC,MAAO,EACPC,OAAQ,EACRC,UAAW,0BACXC,UAAW,EACXC,MAAO,UACPC,UAAW,cACXC,IAAK,MACLC,KAAM,MACNC,OAAQ,sBACRC,OAAQ,IACRC,UAAW,UACXC,SAAU,aAGoBC,KAAKrB,GAInB,CAEhBsB,iBAAiB,IAGf7C,EAAqB,CAIvB8C,UAAW,KAEXC,gBAAiB,OAEjBC,QAAS,KAETC,YAAa,QAEbC,aAAc,QAEdC,iBAAiB,EAEjBC,eAAe,EAEfC,iBAAiB,EAEjBC,aAActF,SAASuF,KAGvBC,iBAAkB,KAGlBC,OAAQ,KAGRC,QAAS,KAITC,qBAAqB,EAGrBC,kBAAkB,GAKpBxF,EAAWyF,iBAAiB,S,6CAC5B1F,EAAQ0F,iBAAiB,U","file":"main.9567296993c431347d6e.js","sourcesContent":["import {Spinner} from 'spin.js';\nimport { alert } from '@pnotify/core';\nimport { LuminousGallery } from 'luminous-lightbox';\n\n\nconst inputRef = document.querySelector('input');\nconst galleryRef = document.querySelector('.gallery');\nconst formRef = document.querySelector('#search-form');\nconst btnMoreRef = document.querySelector('.buttonMore');\nconst sppinerRef = document.querySelector('#foo');\nconst apiKey = '25089730-30cdb6513c5907c1471e4acc8';\nlet numberPage = 1;\nlet inputValue = '';\nconst urlBase = 'https://pixabay.com/api';\nhidenBtnMore();\nspinHiden();\n\nfunction spinHiden() {\n  sppinerRef.classList.add('hiden');\n}\n\nfunction spinVisible() {\n  sppinerRef.classList.remove('hiden');\n}\n\nfunction showNotification(message) {\n  alert({\n    title: 'Ooops!',\n    text:  message,\n    delay: 2000,\n  });\n}\n\n\nconsole.dir(inputRef);\n\nasync function handlerImgserch(event) {\n  event.preventDefault();\n  let isNewRequest = inputRef.value !== inputValue;\n  if (isNewRequest) {\n    clearList();\n    inputValue = inputRef.value;\n    const data = await getData(inputValue);\n    const isNotDataOrEmpty =  !data && !data.hits\n    if (isNotDataOrEmpty) {\n      showNotification('no search result try again') \n      return;\n    }\n    renderGaleryList(data);\n    new LuminousGallery(document.querySelectorAll(\".photo-card\"),galleryOpts,optionsGalleryItem);\n  }\n}\n\nfunction clearList() {\n  galleryRef.innerHTML = '';\n  numberPage =1;\n  hidenBtnMore();\n}\n\nfunction hidenBtnMore() {\n  btnMoreRef.classList.add('hiden');\n}\n\nfunction visibleBtnMore() {\n  btnMoreRef.classList.remove('hiden');\n}\n\nasync function getData(inputValue) {\n  spinVisible();\n  let urlResult = `${urlBase}/?image_type=photo&orientation=horizontal&q=${inputValue}&page=${numberPage}&per_page=12&key=${apiKey}`;\n  const result = await fetch(urlResult);\n  const data = await result.json();\n  console.log('DATA', data)\n  if(!data.total){\n    showNotification('bad search pls change') \n    spinHiden();\n    return\n  }\n  numberPage += 1;\n    visibleBtnMore()\n    spinHiden();\n  return data;\n}\n\nfunction renderGaleryList(data) {\n  data.hits.forEach(element => {\n    let template = `<a class=\"photo-card\" href=\"${element.largeImageURL}\">\n        <img src=\"${element.webformatURL}\" alt=\"${element.tags}\" />\n        \n        <div class=\"stats\">\n          <p class=\"stats-item\">\n            <i class=\"material-icons\">thumb_up</i>\n            ${element.likes}\n          </p>\n          <p class=\"stats-item\">\n            <i class=\"material-icons\">visibility</i>\n            ${element.views}\n          </p>\n          <p class=\"stats-item\">\n            <i class=\"material-icons\">comment</i>\n            ${element.comments}\n          </p>\n          <p class=\"stats-item\">\n            <i class=\"material-icons\">cloud_download</i>\n            ${element.downloads}\n          </p>\n        </div>\n        </a>`;\n    galleryRef.insertAdjacentHTML('beforeend', `${template}`);\n  });\n}\n\nasync function handlerShowMore() {\n    const data = await getData(inputValue);\n  renderGaleryList(data);\n  new LuminousGallery(document.querySelectorAll(\".photo-card\"),galleryOpts,optionsGalleryItem);\n}\nvar opts = {\n  lines: 13, // The number of lines to draw\n  length: 38, // The length of each line\n  width: 17, // The line thickness\n  radius: 45, // The radius of the inner circle\n  scale: 1, // Scales overall size of the spinner\n  corners: 1, // Corner roundness (0..1)\n  speed: 1, // Rounds per second\n  rotate: 0, // The rotation offset\n  animation: 'spinner-line-fade-quick', // The CSS animation name for the lines\n  direction: 1, // 1: clockwise, -1: counterclockwise\n  color: '#ffffff', // CSS color or array of colors\n  fadeColor: 'transparent', // CSS color or array of colors\n  top: '50%', // Top position relative to parent\n  left: '50%', // Left position relative to parent\n  shadow: '0 0 1px transparent', // Box-shadow for the lines\n  zIndex: 2000000000, // The z-index (defaults to 2e9)\n  className: 'spinner', // The CSS class to assign to the spinner\n  position: 'absolute', // Element positioning\n};\nvar target = document.getElementById('foo');\nvar spinner = new Spinner(opts).spin(target);\n\n\n\nvar galleryOpts = {\n  // Whether pressing the arrow keys should move to the next/previous slide.\n  arrowNavigation: true,\n  // A callback triggered when the image changes that is passed the image HTML element \n};\nvar optionsGalleryItem = {\n  // Prefix for generated element class names (e.g. `my-ns` will\n  // result in classes such as `my-ns-lightbox`. Default `lum-`\n  // prefixed classes will always be added as well.\n  namespace: null,\n  // Which attribute to pull the lightbox image source from.\n  sourceAttribute: \"href\",\n  // Captions can be a literal string, or a function that receives the Luminous instance's trigger element as an argument and returns a string. Supports HTML, so use caution when dealing with user input.\n  caption: null,\n  // The event to listen to on the _trigger_ element: triggers opening.\n  openTrigger: \"click\",\n  // The event to listen to on the _lightbox_ element: triggers closing.\n  closeTrigger: \"click\",\n  // Allow closing by pressing escape.\n  closeWithEscape: true,\n  // Automatically close when the page is scrolled.\n  closeOnScroll: false,\n  // Disable close button\n  showCloseButton: true,\n  // A node to append the lightbox element to.\n  appendToNode: document.body,\n  // A selector defining what to append the lightbox element to.\n  // This will take precedence over `appendToNode`.\n  appendToSelector: null,\n  // If present (and a function), this will be called\n  // whenever the lightbox is opened.\n  onOpen: null,\n  // If present (and a function), this will be called\n  // whenever the lightbox is closed.\n  onClose: null,\n  // When true, adds the `imgix-fluid` class to the `img`\n  // inside the lightbox. See https://github.com/imgix/imgix.js\n  // for more information.\n  includeImgixJSClass: false,\n  // Add base styles to the page. See the \"Theming\"\n  // section of README.md for more information.\n  injectBaseStyles: true\n};\n\n\n\nbtnMoreRef.addEventListener('click', handlerShowMore);\nformRef.addEventListener('submit', handlerImgserch);\n"],"sourceRoot":""}